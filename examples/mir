// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const MY_CONST: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        return;
    }
}

fn my_fn(_1: u32, _2: u32) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let _5: &[&str; 2];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &u32;
    let mut _10: (u32, bool);

    bb0: {
        _5 = const my_fn::promoted[1];
        _9 = const my_fn::promoted[0];
        _8 = core::fmt::rt::Argument::<'_>::new_display::<u32>(copy _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _4 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _5, copy _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = AddWithOverflow(copy _1, copy _2);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _1, copy _2) -> [success: bb4, unwind continue];
    }

    bb4: {
        _0 = move (_10.0: u32);
        return;
    }
}

const my_fn::promoted[0]: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const MY_CONST;
        _0 = &_1;
        return;
    }
}

const my_fn::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "MY_CONST: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:32:1: 32:18>::get_type_name(_1: &MIRExtractor, _2: rustc_middle::ty::Ty<'_>, _3: TyCtxt<'_>) -> std::option::Option<std::string::String> {
    debug self => _1;
    debug ty => _2;
    debug tcx => _3;
    let mut _0: std::option::Option<std::string::String>;
    let mut _4: &rustc_middle::infer::canonical::rustc_type_ir::TyKind<rustc_middle::ty::TyCtxt<'_>>;
    let mut _5: isize;
    let _6: &rustc_middle::ty::AdtDef<'_>;
    let mut _8: rustc_middle::ty::AdtDef<'_>;
    let mut _9: std::string::String;
    let _10: &rustc_middle::ty::Ty<'_>;
    let mut _11: rustc_middle::ty::Ty<'_>;
    let mut _12: std::string::String;
    let mut _13: &str;
    let mut _14: std::string::String;
    let mut _15: &str;
    let mut _16: std::string::String;
    let mut _17: &str;
    let mut _18: std::string::String;
    let mut _19: &str;
    let mut _20: std::string::String;
    let mut _21: &str;
    let _22: &rustc_middle::infer::canonical::rustc_type_ir::TyKind<rustc_middle::ty::TyCtxt<'_>>;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let _25: &[&str; 2];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &&rustc_middle::infer::canonical::rustc_type_ir::TyKind<rustc_middle::ty::TyCtxt<'_>>;
    scope 1 {
        debug adt_def => _6;
        let _7: rustc_hir::def_id::DefId;
        scope 2 {
            debug def_id => _7;
        }
    }
    scope 3 {
        debug inner_ty => _10;
    }
    scope 4 {
        debug x => _22;
    }

    bb0: {
        _4 = ty::sty::<impl rustc_middle::ty::Ty<'_>>::kind(copy _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant((*_4));
        switchInt(move _5) -> [0: bb6, 2: bb5, 3: bb4, 4: bb3, 5: bb9, 12: bb8, 21: bb7, otherwise: bb2];
    }

    bb2: {
        _22 = copy _4;
        _25 = const MIRExtractor::get_type_name::promoted[0];
        _29 = &_22;
        _28 = core::fmt::rt::Argument::<'_>::new_debug::<&rustc_middle::infer::canonical::rustc_type_ir::TyKind<TyCtxt<'_>>>(copy _29) -> [return: bb17, unwind continue];
    }

    bb3: {
        _21 = const "float";
        _20 = <str as ToString>::to_string(move _21) -> [return: bb16, unwind continue];
    }

    bb4: {
        _19 = const "uint";
        _18 = <str as ToString>::to_string(move _19) -> [return: bb15, unwind continue];
    }

    bb5: {
        _17 = const "int";
        _16 = <str as ToString>::to_string(move _17) -> [return: bb14, unwind continue];
    }

    bb6: {
        _15 = const "bool";
        _14 = <str as ToString>::to_string(move _15) -> [return: bb13, unwind continue];
    }

    bb7: {
        _13 = const "tuple";
        _12 = <str as ToString>::to_string(move _13) -> [return: bb12, unwind continue];
    }

    bb8: {
        _10 = &(((*_4) as Ref).1: rustc_middle::ty::Ty<'_>);
        _11 = copy (*_10);
        _0 = MIRExtractor::get_type_name(copy _1, move _11, copy _3) -> [return: bb20, unwind continue];
    }

    bb9: {
        _6 = &(((*_4) as Adt).0: rustc_middle::ty::AdtDef<'_>);
        _8 = copy (*_6);
        _7 = rustc_middle::ty::AdtDef::<'_>::did(move _8) -> [return: bb10, unwind continue];
    }

    bb10: {
        _9 = print::pretty::<impl TyCtxt<'_>>::def_path_str::<rustc_hir::def_id::DefId>(copy _3, copy _7) -> [return: bb11, unwind continue];
    }

    bb11: {
        _0 = std::option::Option::<std::string::String>::Some(move _9);
        goto -> bb20;
    }

    bb12: {
        _0 = std::option::Option::<std::string::String>::Some(move _12);
        goto -> bb20;
    }

    bb13: {
        _0 = std::option::Option::<std::string::String>::Some(move _14);
        goto -> bb20;
    }

    bb14: {
        _0 = std::option::Option::<std::string::String>::Some(move _16);
        goto -> bb20;
    }

    bb15: {
        _0 = std::option::Option::<std::string::String>::Some(move _18);
        goto -> bb20;
    }

    bb16: {
        _0 = std::option::Option::<std::string::String>::Some(move _20);
        goto -> bb20;
    }

    bb17: {
        _27 = [move _28];
        _26 = &_27;
        _24 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _25, copy _26) -> [return: bb18, unwind continue];
    }

    bb18: {
        _23 = _print(move _24) -> [return: bb19, unwind continue];
    }

    bb19: {
        _0 = std::option::Option::<std::string::String>::None;
        goto -> bb20;
    }

    bb20: {
        return;
    }
}

const <impl at src/main.rs:32:1: 32:18>::get_type_name::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Missing ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:32:1: 32:18>::print_function_details(_1: &MIRExtractor, _2: TyCtxt<'_>, _3: &str, _4: &FnDecl<'_>) -> () {
    debug self => _1;
    debug tcx => _2;
    debug fn_name => _3;
    debug fn_decl => _4;
    let mut _0: ();
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let _7: &[&str; 2];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let mut _12: std::iter::Enumerate<std::slice::Iter<'_, rustc_hir::Ty<'_>>>;
    let mut _13: std::iter::Enumerate<std::slice::Iter<'_, rustc_hir::Ty<'_>>>;
    let mut _14: std::slice::Iter<'_, rustc_hir::Ty<'_>>;
    let mut _15: std::iter::Enumerate<std::slice::Iter<'_, rustc_hir::Ty<'_>>>;
    let mut _16: std::option::Option<(usize, &rustc_hir::Ty<'_>)>;
    let mut _17: &mut std::iter::Enumerate<std::slice::Iter<'_, rustc_hir::Ty<'_>>>;
    let mut _18: isize;
    let mut _22: &rustc_hir::Ty<'_>;
    let mut _23: isize;
    let mut _25: isize;
    let mut _27: isize;
    let mut _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let _33: &[&str; 1];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _39: &str;
    let mut _40: &str;
    let mut _41: &str;
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let _44: &[&str; 3];
    let _45: &[core::fmt::rt::Argument<'_>; 2];
    let _46: [core::fmt::rt::Argument<'_>; 2];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &usize;
    let _49: usize;
    let mut _50: (usize, bool);
    let mut _51: core::fmt::rt::Argument<'_>;
    let _52: &std::string::String;
    let mut _53: &rustc_hir::FnRetTy<'_>;
    let mut _54: isize;
    let _55: &&rustc_hir::Ty<'_>;
    let mut _57: rustc_middle::infer::canonical::rustc_type_ir::EarlyBinder<rustc_middle::ty::TyCtxt<'_>, rustc_middle::ty::Ty<'_>>;
    let mut _58: rustc_hir::OwnerId;
    let _59: ();
    let mut _60: std::fmt::Arguments<'_>;
    let _61: &[&str; 2];
    let _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: [core::fmt::rt::Argument<'_>; 1];
    let mut _64: core::fmt::rt::Argument<'_>;
    let _65: &rustc_middle::ty::Ty<'_>;
    let _66: ();
    let mut _67: std::fmt::Arguments<'_>;
    let _68: &[&str; 1];
    let mut _69: &[rustc_hir::Ty<'_>];
    let mut _70: &rustc_hir::Ty<'_>;
    scope 1 {
        debug iter => _15;
        let _19: usize;
        let _20: &rustc_hir::Ty<'_>;
        scope 2 {
            debug i => _19;
            debug arg => _20;
            let _21: std::string::String;
            let _24: rustc_hir::QPath<'_>;
            scope 3 {
                debug type_str => _21;
            }
            scope 4 {
                debug p => _24;
                let _26: &rustc_hir::Path<'_>;
                scope 5 {
                    debug path => _26;
                    let _28: rustc_hir::def::DefKind;
                    let _29: rustc_hir::def_id::DefId;
                    scope 6 {
                        debug def_kind => _28;
                        debug def_id => _29;
                        let _31: std::string::String;
                        scope 7 {
                            debug res => _31;
                        }
                    }
                }
            }
        }
    }
    scope 8 {
        debug ty => _55;
        let _56: rustc_middle::ty::Ty<'_>;
        scope 9 {
            debug return_ty => _56;
        }
    }

    bb0: {
        _7 = const MIRExtractor::print_function_details::promoted[4];
        _11 = &_3;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(copy _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _6 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _7, copy _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _print(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _69 = deref_copy ((*_4).0: &[rustc_hir::Ty<'_>]);
        _14 = core::slice::<impl [rustc_hir::Ty<'_>]>::iter(copy _69) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = <std::slice::Iter<'_, rustc_hir::Ty<'_>> as std::iter::Iterator>::enumerate(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = <Enumerate<std::slice::Iter<'_, rustc_hir::Ty<'_>>> as IntoIterator>::into_iter(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = move _12;
        goto -> bb7;
    }

    bb7: {
        _17 = &mut _15;
        _16 = <Enumerate<std::slice::Iter<'_, rustc_hir::Ty<'_>>> as std::iter::Iterator>::next(copy _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb10, otherwise: bb9];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _19 = copy (((_16 as Some).0: (usize, &rustc_hir::Ty<'_>)).0: usize);
        _20 = copy (((_16 as Some).0: (usize, &rustc_hir::Ty<'_>)).1: &rustc_hir::Ty<'_>);
        _22 = rustc_hir::Ty::<'_>::peel_refs(copy _20) -> [return: bb12, unwind continue];
    }

    bb11: {
        _53 = &((*_4).1: rustc_hir::FnRetTy<'_>);
        _54 = discriminant((*_53));
        switchInt(move _54) -> [0: bb30, 1: bb31, otherwise: bb9];
    }

    bb12: {
        _23 = discriminant(((*_22).1: rustc_hir::TyKind<'_>));
        switchInt(move _23) -> [9: bb14, otherwise: bb13];
    }

    bb13: {
        _41 = const "unknown";
        _21 = <str as ToString>::to_string(move _41) -> [return: bb24, unwind continue];
    }

    bb14: {
        _24 = copy ((((*_22).1: rustc_hir::TyKind<'_>) as Path).0: rustc_hir::QPath<'_>);
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _40 = const "";
        _21 = <str as ToString>::to_string(move _40) -> [return: bb24, unwind continue];
    }

    bb16: {
        _26 = copy ((_24 as Resolved).1: &rustc_hir::Path<'_>);
        _27 = discriminant(((*_26).1: rustc_hir::def::Res));
        switchInt(move _27) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _39 = const "";
        _21 = <str as ToString>::to_string(move _39) -> [return: bb24, unwind continue];
    }

    bb18: {
        _28 = copy ((((*_26).1: rustc_hir::def::Res) as Def).0: rustc_hir::def::DefKind);
        _29 = copy ((((*_26).1: rustc_hir::def::Res) as Def).1: rustc_hir::def_id::DefId);
        _33 = const MIRExtractor::print_function_details::promoted[1];
        _38 = print::pretty::<impl TyCtxt<'_>>::def_path_str::<rustc_hir::def_id::DefId>(copy _2, copy _29) -> [return: bb19, unwind continue];
    }

    bb19: {
        _37 = &_38;
        _36 = core::fmt::rt::Argument::<'_>::new_debug::<std::string::String>(copy _37) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _35 = [move _36];
        _34 = &_35;
        _32 = std::fmt::Arguments::<'_>::new_v1::<1, 1>(copy _33, copy _34) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        _31 = format(move _32) -> [return: bb22, unwind: bb40];
    }

    bb22: {
        drop(_38) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _30 = move _31;
        _21 = must_use::<std::string::String>(move _30) -> [return: bb24, unwind continue];
    }

    bb24: {
        _44 = const MIRExtractor::print_function_details::promoted[0];
        _50 = AddWithOverflow(copy _19, const 1_usize);
        assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _19, const 1_usize) -> [success: bb25, unwind: bb38];
    }

    bb25: {
        _49 = move (_50.0: usize);
        _48 = &_49;
        _47 = core::fmt::rt::Argument::<'_>::new_display::<usize>(copy _48) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        _52 = &_21;
        _51 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(copy _52) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _46 = [move _47, move _51];
        _45 = &_46;
        _43 = std::fmt::Arguments::<'_>::new_v1::<3, 2>(copy _44, copy _45) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        _42 = _print(move _43) -> [return: bb29, unwind: bb38];
    }

    bb29: {
        drop(_21) -> [return: bb7, unwind continue];
    }

    bb30: {
        _68 = const MIRExtractor::print_function_details::promoted[2];
        _67 = std::fmt::Arguments::<'_>::new_const::<1>(copy _68) -> [return: bb36, unwind continue];
    }

    bb31: {
        _55 = &(((*_53) as Return).0: &rustc_hir::Ty<'_>);
        _70 = deref_copy (*_55);
        _58 = copy (((*_70).0: rustc_hir::HirId).0: rustc_hir::OwnerId);
        _57 = rustc_middle::query::<impl TyCtxt<'_>>::type_of::<OwnerId>(copy _2, move _58) -> [return: bb32, unwind continue];
    }

    bb32: {
        _56 = EarlyBinder::<TyCtxt<'_>, rustc_middle::ty::Ty<'_>>::skip_binder(move _57) -> [return: bb33, unwind continue];
    }

    bb33: {
        _61 = const MIRExtractor::print_function_details::promoted[3];
        _65 = &_56;
        _64 = core::fmt::rt::Argument::<'_>::new_display::<rustc_middle::ty::Ty<'_>>(copy _65) -> [return: bb34, unwind continue];
    }

    bb34: {
        _63 = [move _64];
        _62 = &_63;
        _60 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _61, copy _62) -> [return: bb35, unwind continue];
    }

    bb35: {
        _59 = _print(move _60) -> [return: bb37, unwind continue];
    }

    bb36: {
        _66 = _print(move _67) -> [return: bb37, unwind continue];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_21) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_31) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_38) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }
}

const <impl at src/main.rs:32:1: 32:18>::print_function_details::promoted[0]: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "  Arg ", const ": ", const "\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:32:1: 32:18>::print_function_details::promoted[1]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:32:1: 32:18>::print_function_details::promoted[2]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "  Returns: ()\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:32:1: 32:18>::print_function_details::promoted[3]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "  Returns: ", const "\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:32:1: 32:18>::print_function_details::promoted[4]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Function: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:117:1: 117:46>::config(_1: &mut MIRExtractor, _2: &mut rustc_interface::Config) -> () {
    debug self => _1;
    debug config => _2;
    let mut _0: ();
    let mut _3: std::option::Option<std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut rustc_session::parse::ParseSess) + std::marker::Send>>;
    let mut _4: std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut rustc_session::parse::ParseSess) + std::marker::Send>;
    let mut _5: std::boxed::Box<{closure@src/main.rs:120:46: 120:58}>;

    bb0: {
        _5 = std::boxed::Box::<{closure@src/main.rs:120:46: 120:58}>::new(const ZeroSized: {closure@src/main.rs:120:46: 120:58}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut rustc_session::parse::ParseSess) + std::marker::Send> (PointerCoercion(Unsize, Implicit));
        _3 = std::option::Option::<std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut ParseSess) + Send>>::Some(move _4);
        drop(((*_2).10: std::option::Option<std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut rustc_session::parse::ParseSess) + std::marker::Send>>)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        ((*_2).10: std::option::Option<std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut rustc_session::parse::ParseSess) + std::marker::Send>>) = move _3;
        return;
    }

    bb3 (cleanup): {
        ((*_2).10: std::option::Option<std::boxed::Box<dyn for<'a> std::ops::FnOnce(&'a mut rustc_session::parse::ParseSess) + std::marker::Send>>) = move _3;
        resume;
    }
}

fn <impl at src/main.rs:117:1: 117:46>::config::{closure#0}(_1: {closure@src/main.rs:120:46: 120:58}, _2: &mut ParseSess) -> () {
    debug psess => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let _5: &[&str; 1];

    bb0: {
        _5 = const <MIRExtractor as rustc_driver::Callbacks>::config::{closure#0}::promoted[0];
        _4 = std::fmt::Arguments::<'_>::new_const::<1>(copy _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _print(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const <impl at src/main.rs:117:1: 117:46>::config::{closure#0}::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "psess created!\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:117:1: 117:46>::after_expansion(_1: &mut MIRExtractor, _2: &Compiler, _3: &Queries<'_>) -> Compilation {
    debug self => _1;
    debug _compiler => _2;
    debug queries => _3;
    let mut _0: rustc_driver::Compilation;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let _6: &[&str; 1];

    bb0: {
        _6 = const <MIRExtractor as rustc_driver::Callbacks>::after_expansion::promoted[0];
        _5 = std::fmt::Arguments::<'_>::new_const::<1>(copy _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _print(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = rustc_driver::Compilation::Continue;
        return;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_expansion::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "after expansion!\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:117:1: 117:46>::after_analysis(_1: &mut MIRExtractor, _2: &Compiler, _3: &Queries<'_>) -> Compilation {
    debug self => _1;
    debug _compiler => _2;
    debug _queries => _3;
    let mut _0: rustc_driver::Compilation;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let _6: &[&str; 1];
    let _7: ();
    let mut _8: &mut rustc_interface::queries::QueryResult<'_, &rustc_middle::ty::GlobalCtxt<'_>>;
    let mut _9: rustc_interface::queries::QueryResult<'_, &rustc_middle::ty::GlobalCtxt<'_>>;
    let mut _10: std::result::Result<rustc_interface::queries::QueryResult<'_, &rustc_middle::ty::GlobalCtxt<'_>>, rustc_span::ErrorGuaranteed>;
    let mut _11: {closure@src/main.rs:141:47: 141:52};
    let mut _12: &MIRExtractor;

    bb0: {
        _6 = const <MIRExtractor as rustc_driver::Callbacks>::after_analysis::promoted[0];
        _5 = std::fmt::Arguments::<'_>::new_const::<1>(copy _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _print(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = Queries::<'_>::global_ctxt(copy _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = Result::<rustc_interface::queries::QueryResult<'_, &GlobalCtxt<'_>>, rustc_span::ErrorGuaranteed>::unwrap(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = &mut _9;
        _12 = &(*_1);
        _11 = {closure@src/main.rs:141:47: 141:52} { self: move _12 };
        _7 = rustc_interface::queries::QueryResult::<'_, &GlobalCtxt<'_>>::enter::<(), {closure@src/main.rs:141:47: 141:52}>(move _8, move _11) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = rustc_driver::Compilation::Continue;
        return;
    }

    bb7 (cleanup): {
        drop(_9) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_analysis::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "After analysis!\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:117:1: 117:46>::after_analysis::{closure#0}(_1: {closure@src/main.rs:141:47: 141:52}, _2: TyCtxt<'_>) -> () {
    debug tcx => _2;
    debug self => const MIRExtractor;
    let mut _0: ();
    let mut _3: std::iter::Copied<std::slice::Iter<'_, rustc_hir::def_id::LocalDefId>>;
    let mut _4: std::iter::Copied<std::slice::Iter<'_, rustc_hir::def_id::LocalDefId>>;
    let mut _5: rustc_middle::hir::map::Map<'_>;
    let mut _6: std::iter::Copied<std::slice::Iter<'_, rustc_hir::def_id::LocalDefId>>;
    let mut _7: std::option::Option<rustc_hir::def_id::LocalDefId>;
    let mut _8: &mut std::iter::Copied<std::slice::Iter<'_, rustc_hir::def_id::LocalDefId>>;
    let mut _9: isize;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 3];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 2];
    let _18: [core::fmt::rt::Argument<'_>; 2];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &rustc_hir::def_id::LocalDefId;
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &&rustc_index::vec::IndexVec<rustc_middle::mir::Promoted, rustc_middle::mir::Body<'_>>;
    let mut _23: &[core::fmt::rt::Placeholder];
    let _24: &[core::fmt::rt::Placeholder; 2];
    let _25: [core::fmt::rt::Placeholder; 2];
    let mut _26: core::fmt::rt::Placeholder;
    let mut _27: core::fmt::rt::Alignment;
    let mut _28: core::fmt::rt::Count;
    let mut _29: core::fmt::rt::Count;
    let mut _30: core::fmt::rt::Placeholder;
    let mut _31: core::fmt::rt::Alignment;
    let mut _32: core::fmt::rt::Count;
    let mut _33: core::fmt::rt::Count;
    let mut _34: core::fmt::rt::UnsafeArg;
    let mut _35: std::iter::Copied<std::slice::Iter<'_, rustc_hir::ItemId>>;
    let mut _36: std::iter::Copied<std::slice::Iter<'_, rustc_hir::ItemId>>;
    let mut _37: rustc_middle::hir::map::Map<'_>;
    let mut _38: std::iter::Copied<std::slice::Iter<'_, rustc_hir::ItemId>>;
    let mut _39: std::option::Option<rustc_hir::ItemId>;
    let mut _40: &mut std::iter::Copied<std::slice::Iter<'_, rustc_hir::ItemId>>;
    let mut _41: isize;
    let mut _44: rustc_middle::hir::map::Map<'_>;
    let mut _45: &rustc_hir::ItemKind<'_>;
    let mut _46: isize;
    let _47: ();
    let mut _48: std::fmt::Arguments<'_>;
    let _49: &[&str; 2];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &rustc_span::symbol::Symbol;
    let _55: ();
    let _56: &str;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _59: &rustc_span::symbol::Symbol;
    let mut _61: isize;
    let mut _64: rustc_hir::def_id::DefId;
    let mut _65: std::option::Option<rustc_hir::def_id::DefId>;
    let mut _66: &rustc_hir::TraitRef<'_>;
    let _67: ();
    let mut _68: std::fmt::Arguments<'_>;
    let _69: &[&str; 2];
    let _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: [core::fmt::rt::Argument<'_>; 1];
    let mut _72: core::fmt::rt::Argument<'_>;
    let _73: &std::string::String;
    let mut _75: rustc_hir::def_id::DefId;
    let mut _76: rustc_hir::OwnerId;
    let _77: ();
    let mut _78: std::fmt::Arguments<'_>;
    let _79: &[&str; 2];
    let _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: [core::fmt::rt::Argument<'_>; 1];
    let mut _82: core::fmt::rt::Argument<'_>;
    let _83: &rustc_middle::infer::canonical::rustc_type_ir::EarlyBinder<rustc_middle::ty::TyCtxt<'_>, rustc_middle::ty::Ty<'_>>;
    let mut _84: std::slice::Iter<'_, rustc_hir::ImplItemRef>;
    let mut _85: std::slice::Iter<'_, rustc_hir::ImplItemRef>;
    let mut _87: std::option::Option<&rustc_hir::ImplItemRef>;
    let mut _88: &mut std::slice::Iter<'_, rustc_hir::ImplItemRef>;
    let mut _89: isize;
    let mut _92: rustc_middle::hir::map::Map<'_>;
    let mut _93: rustc_hir::ImplItemId;
    let mut _94: isize;
    let mut _98: std::fmt::Arguments<'_>;
    let _99: &[&str; 2];
    let _100: &[core::fmt::rt::Argument<'_>; 2];
    let _101: [core::fmt::rt::Argument<'_>; 2];
    let mut _102: core::fmt::rt::Argument<'_>;
    let _103: &rustc_span::symbol::Symbol;
    let mut _104: core::fmt::rt::Argument<'_>;
    let _105: &rustc_span::symbol::Symbol;
    let _106: ();
    let _107: &str;
    let _108: &std::string::String;
    let mut _109: &rustc_hir::Impl<'_>;
    let mut _110: &MIRExtractor;
    let mut _111: &rustc_hir::FnDecl<'_>;
    let mut _112: &rustc_hir::Impl<'_>;
    let mut _113: &rustc_hir::Impl<'_>;
    let mut _114: &[rustc_hir::ImplItemRef];
    let mut _115: &MIRExtractor;
    let mut _116: &rustc_hir::FnDecl<'_>;
    scope 1 {
        debug iter => _6;
        let _10: rustc_hir::def_id::LocalDefId;
        scope 2 {
            debug def_id => _10;
            let _11: &rustc_index::vec::IndexVec<rustc_middle::mir::Promoted, rustc_middle::mir::Body<'_>>;
            scope 3 {
                debug mir => _11;
            }
        }
    }
    scope 4 {
        debug iter => _38;
        let _42: rustc_hir::ItemId;
        scope 5 {
            debug id => _42;
            let _43: &rustc_hir::Item<'_>;
            scope 6 {
                debug item => _43;
                let _54: &rustc_hir::FnSig<'_>;
                let _60: &&rustc_hir::Impl<'_>;
                scope 7 {
                    debug fn_sig => _54;
                }
                scope 8 {
                    debug impl_ => _60;
                    let _74: rustc_middle::infer::canonical::rustc_type_ir::EarlyBinder<rustc_middle::ty::TyCtxt<'_>, rustc_middle::ty::Ty<'_>>;
                    let mut _86: std::slice::Iter<'_, rustc_hir::ImplItemRef>;
                    scope 9 {
                        debug trait_ref => _62;
                        let _62: rustc_hir::TraitRef<'_>;
                        let _63: std::string::String;
                        scope 10 {
                            debug trait_name => _63;
                        }
                    }
                    scope 11 {
                        debug self_ty => _74;
                    }
                    scope 12 {
                        debug iter => _86;
                        let _90: &rustc_hir::ImplItemRef;
                        scope 13 {
                            debug impl_item_ref => _90;
                            let _91: &rustc_hir::ImplItem<'_>;
                            scope 14 {
                                debug impl_item => _91;
                                scope 15 {
                                    debug fn_sig => _95;
                                    let _95: &rustc_hir::FnSig<'_>;
                                    let _96: std::string::String;
                                    let _97: std::string::String;
                                    scope 16 {
                                        debug method_name => _96;
                                    }
                                    scope 17 {
                                        debug res => _97;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = hir::<impl TyCtxt<'_>>::hir(copy _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = rustc_middle::hir::map::Map::<'_>::body_owners(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <Copied<std::slice::Iter<'_, LocalDefId>> as IntoIterator>::into_iter(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = move _3;
        goto -> bb4;
    }

    bb4: {
        _8 = &mut _6;
        _7 = <Copied<std::slice::Iter<'_, LocalDefId>> as std::iter::Iterator>::next(copy _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb7, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _10 = copy ((_7 as Some).0: rustc_hir::def_id::LocalDefId);
        _11 = rustc_middle::query::<impl TyCtxt<'_>>::promoted_mir::<LocalDefId>(copy _2, copy _10) -> [return: bb9, unwind continue];
    }

    bb8: {
        _37 = hir::<impl TyCtxt<'_>>::hir(copy _2) -> [return: bb16, unwind continue];
    }

    bb9: {
        _15 = const <MIRExtractor as rustc_driver::Callbacks>::after_analysis::{closure#0}::promoted[0];
        _14 = copy _15 as &[&str] (PointerCoercion(Unsize, Implicit));
        _20 = &_10;
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<LocalDefId>(copy _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        _22 = &_11;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<&rustc_index::vec::IndexVec<Promoted, rustc_middle::mir::Body<'_>>>(copy _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _18 = [move _19, move _21];
        _17 = &_18;
        _16 = copy _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _27 = core::fmt::rt::Alignment::Unknown;
        _28 = core::fmt::rt::Count::Implied;
        _29 = core::fmt::rt::Count::Implied;
        _26 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _27, const 0_u32, move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        _31 = core::fmt::rt::Alignment::Unknown;
        _32 = core::fmt::rt::Count::Implied;
        _33 = core::fmt::rt::Count::Implied;
        _30 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _31, const 4_u32, move _32, move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        _25 = [move _26, move _30];
        _24 = &_25;
        _23 = copy _24 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize, Implicit));
        _34 = core::fmt::rt::UnsafeArg::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _13 = std::fmt::Arguments::<'_>::new_v1_formatted(move _14, move _16, move _23, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb15, unwind continue];
    }

    bb15: {
        _12 = _print(move _13) -> [return: bb4, unwind continue];
    }

    bb16: {
        _36 = rustc_middle::hir::map::Map::<'_>::items(move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        _35 = <Copied<std::slice::Iter<'_, ItemId>> as IntoIterator>::into_iter(move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        _38 = move _35;
        goto -> bb19;
    }

    bb19: {
        _40 = &mut _38;
        _39 = <Copied<std::slice::Iter<'_, ItemId>> as std::iter::Iterator>::next(copy _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb22, 1: bb21, otherwise: bb6];
    }

    bb21: {
        _42 = copy ((_39 as Some).0: rustc_hir::ItemId);
        _44 = hir::<impl TyCtxt<'_>>::hir(copy _2) -> [return: bb23, unwind continue];
    }

    bb22: {
        return;
    }

    bb23: {
        _43 = rustc_middle::hir::map::Map::<'_>::item(move _44, copy _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        _45 = &((*_43).2: rustc_hir::ItemKind<'_>);
        _46 = discriminant((*_45));
        switchInt(move _46) -> [4: bb26, 11: bb27, 15: bb25, otherwise: bb19];
    }

    bb25: {
        _60 = &(((*_45) as Impl).0: &rustc_hir::Impl<'_>);
        _109 = deref_copy (*_60);
        _61 = discriminant(((*_109).6: std::option::Option<rustc_hir::TraitRef<'_>>));
        switchInt(move _61) -> [1: bb33, 0: bb40, otherwise: bb6];
    }

    bb26: {
        _54 = &(((*_45) as Fn).0: rustc_hir::FnSig<'_>);
        _110 = deref_copy (_1.0: &MIRExtractor);
        _59 = &(((*_43).0: rustc_span::symbol::Ident).0: rustc_span::symbol::Symbol);
        _58 = <rustc_span::symbol::Symbol as ToString>::to_string(move _59) -> [return: bb30, unwind continue];
    }

    bb27: {
        _49 = const <MIRExtractor as rustc_driver::Callbacks>::after_analysis::{closure#0}::promoted[4];
        _53 = &(((*_43).0: rustc_span::symbol::Ident).0: rustc_span::symbol::Symbol);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<rustc_span::symbol::Symbol>(copy _53) -> [return: bb28, unwind continue];
    }

    bb28: {
        _51 = [move _52];
        _50 = &_51;
        _48 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _49, copy _50) -> [return: bb29, unwind continue];
    }

    bb29: {
        _47 = _print(move _48) -> [return: bb19, unwind continue];
    }

    bb30: {
        _57 = &_58;
        _56 = <std::string::String as std::ops::Deref>::deref(copy _57) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        _111 = deref_copy ((*_54).1: &rustc_hir::FnDecl<'_>);
        _55 = MIRExtractor::print_function_details(copy _110, copy _2, copy _56, copy _111) -> [return: bb32, unwind: bb63];
    }

    bb32: {
        drop(_58) -> [return: bb19, unwind continue];
    }

    bb33: {
        _112 = deref_copy (*_60);
        _62 = copy ((((*_112).6: std::option::Option<rustc_hir::TraitRef<'_>>) as Some).0: rustc_hir::TraitRef<'_>);
        _66 = &_62;
        _65 = rustc_hir::TraitRef::<'_>::trait_def_id(move _66) -> [return: bb34, unwind continue];
    }

    bb34: {
        _64 = std::option::Option::<rustc_hir::def_id::DefId>::unwrap(move _65) -> [return: bb35, unwind continue];
    }

    bb35: {
        _63 = print::pretty::<impl TyCtxt<'_>>::def_path_str::<rustc_hir::def_id::DefId>(copy _2, move _64) -> [return: bb36, unwind continue];
    }

    bb36: {
        _69 = const <MIRExtractor as rustc_driver::Callbacks>::after_analysis::{closure#0}::promoted[3];
        _73 = &_63;
        _72 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(copy _73) -> [return: bb37, unwind: bb62];
    }

    bb37: {
        _71 = [move _72];
        _70 = &_71;
        _68 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _69, copy _70) -> [return: bb38, unwind: bb62];
    }

    bb38: {
        _67 = _print(move _68) -> [return: bb39, unwind: bb62];
    }

    bb39: {
        drop(_63) -> [return: bb45, unwind continue];
    }

    bb40: {
        _76 = copy ((*_43).1: rustc_hir::OwnerId);
        _75 = OwnerId::to_def_id(move _76) -> [return: bb41, unwind continue];
    }

    bb41: {
        _74 = rustc_middle::query::<impl TyCtxt<'_>>::type_of::<rustc_hir::def_id::DefId>(copy _2, move _75) -> [return: bb42, unwind continue];
    }

    bb42: {
        _79 = const <MIRExtractor as rustc_driver::Callbacks>::after_analysis::{closure#0}::promoted[2];
        _83 = &_74;
        _82 = core::fmt::rt::Argument::<'_>::new_debug::<EarlyBinder<TyCtxt<'_>, rustc_middle::ty::Ty<'_>>>(copy _83) -> [return: bb43, unwind continue];
    }

    bb43: {
        _81 = [move _82];
        _80 = &_81;
        _78 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _79, copy _80) -> [return: bb44, unwind continue];
    }

    bb44: {
        _77 = _print(move _78) -> [return: bb45, unwind continue];
    }

    bb45: {
        _113 = deref_copy (*_60);
        _114 = deref_copy ((*_113).8: &[rustc_hir::ImplItemRef]);
        _85 = core::slice::<impl [ImplItemRef]>::iter(copy _114) -> [return: bb46, unwind continue];
    }

    bb46: {
        _84 = <std::slice::Iter<'_, ImplItemRef> as IntoIterator>::into_iter(move _85) -> [return: bb47, unwind continue];
    }

    bb47: {
        _86 = move _84;
        goto -> bb48;
    }

    bb48: {
        _88 = &mut _86;
        _87 = <std::slice::Iter<'_, ImplItemRef> as std::iter::Iterator>::next(copy _88) -> [return: bb49, unwind continue];
    }

    bb49: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb19, 1: bb50, otherwise: bb6];
    }

    bb50: {
        _90 = copy ((_87 as Some).0: &rustc_hir::ImplItemRef);
        _92 = hir::<impl TyCtxt<'_>>::hir(copy _2) -> [return: bb51, unwind continue];
    }

    bb51: {
        _93 = copy ((*_90).0: rustc_hir::ImplItemId);
        _91 = rustc_middle::hir::map::Map::<'_>::impl_item(move _92, move _93) -> [return: bb52, unwind continue];
    }

    bb52: {
        _94 = discriminant(((*_91).3: rustc_hir::ImplItemKind<'_>));
        switchInt(move _94) -> [1: bb53, otherwise: bb48];
    }

    bb53: {
        _95 = &((((*_91).3: rustc_hir::ImplItemKind<'_>) as Fn).0: rustc_hir::FnSig<'_>);
        _99 = const <MIRExtractor as rustc_driver::Callbacks>::after_analysis::{closure#0}::promoted[1];
        _103 = &(((*_43).0: rustc_span::symbol::Ident).0: rustc_span::symbol::Symbol);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<rustc_span::symbol::Symbol>(copy _103) -> [return: bb54, unwind continue];
    }

    bb54: {
        _105 = &(((*_91).0: rustc_span::symbol::Ident).0: rustc_span::symbol::Symbol);
        _104 = core::fmt::rt::Argument::<'_>::new_display::<rustc_span::symbol::Symbol>(copy _105) -> [return: bb55, unwind continue];
    }

    bb55: {
        _101 = [move _102, move _104];
        _100 = &_101;
        _98 = std::fmt::Arguments::<'_>::new_v1::<2, 2>(copy _99, copy _100) -> [return: bb56, unwind continue];
    }

    bb56: {
        _97 = format(move _98) -> [return: bb57, unwind continue];
    }

    bb57: {
        _96 = must_use::<std::string::String>(move _97) -> [return: bb58, unwind continue];
    }

    bb58: {
        _115 = deref_copy (_1.0: &MIRExtractor);
        _108 = &_96;
        _107 = <std::string::String as std::ops::Deref>::deref(copy _108) -> [return: bb59, unwind: bb61];
    }

    bb59: {
        _116 = deref_copy ((*_95).1: &rustc_hir::FnDecl<'_>);
        _106 = MIRExtractor::print_function_details(copy _115, copy _2, copy _107, copy _116) -> [return: bb60, unwind: bb61];
    }

    bb60: {
        drop(_96) -> [return: bb48, unwind continue];
    }

    bb61 (cleanup): {
        drop(_96) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_63) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_58) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_analysis::{closure#0}::promoted[0]: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "MIR for ", const ":\n", const "\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_analysis::{closure#0}::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "::"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_analysis::{closure#0}::promoted[2]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Impl block for type ", const "\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_analysis::{closure#0}::promoted[3]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Impl block for trait ", const "\n"];
        _0 = &_1;
        return;
    }
}

const <impl at src/main.rs:117:1: 117:46>::after_analysis::{closure#0}::promoted[4]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Struct: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: rustc_session::EarlyDiagCtxt;
    let mut _2: rustc_session::config::ErrorOutputType;
    let _3: ();
    let _4: &rustc_session::EarlyDiagCtxt;
    let mut _6: std::boxed::Box<[std::string::String]>;
    let mut _7: std::boxed::Box<[std::string::String; 2]>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<[std::string::String; 2]>;
    let mut _12: std::string::String;
    let mut _13: &str;
    let mut _14: std::string::String;
    let mut _15: &str;
    let mut _17: std::result::Result<(), rustc_span::ErrorGuaranteed>;
    let mut _18: rustc_driver::RunCompiler<'_>;
    let _19: &[std::string::String];
    let _20: &std::vec::Vec<std::string::String>;
    let mut _21: &mut dyn rustc_driver::Callbacks + std::marker::Send;
    let mut _22: &mut MIRExtractor;
    let mut _23: isize;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let _26: &[&str; 1];
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let _30: &[&str; 2];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &rustc_span::ErrorGuaranteed;
    let mut _35: &mut std::boxed::Box<[std::string::String; 2]>;
    let mut _36: ();
    let mut _37: *const [std::string::String; 2];
    scope 1 {
        debug early_dcx => _1;
        let _5: std::vec::Vec<std::string::String>;
        let mut _38: *const ();
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: usize;
        let mut _43: bool;
        scope 2 {
            debug args => _5;
            let mut _16: MIRExtractor;
            scope 3 {
                debug callbacks => const MIRExtractor;
                let _27: rustc_span::ErrorGuaranteed;
                scope 4 {
                    debug err => const rustc_span::ErrorGuaranteed(());
                }
            }
        }
    }

    bb0: {
        _2 = <ErrorOutputType as std::default::Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = EarlyDiagCtxt::new(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_1;
        _3 = init_rustc_env_logger(copy _4) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _8 = SizeOf([std::string::String; 2]);
        _9 = AlignOf([std::string::String; 2]);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _11 = ShallowInitBox(move _10, [std::string::String; 2]);
        _13 = const "rustc";
        _12 = <&str as Into<std::string::String>>::into(move _13) -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _15 = const "src/main.rs";
        _14 = <&str as Into<std::string::String>>::into(move _15) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _37 = copy (((_11.0: std::ptr::Unique<[std::string::String; 2]>).0: std::ptr::NonNull<[std::string::String; 2]>).0: *const [std::string::String; 2]);
        _38 = copy _37 as *const () (PtrToPtr);
        _39 = copy _38 as usize (Transmute);
        _40 = AlignOf([std::string::String; 2]);
        _41 = Sub(copy _40, const 1_usize);
        _42 = BitAnd(copy _39, copy _41);
        _43 = Eq(copy _42, const 0_usize);
        assert(copy _43, "misaligned pointer dereference: address must be a multiple of {} but is {}", copy _40, copy _39) -> [success: bb25, unwind unreachable];
    }

    bb7: {
        _20 = &_5;
        _19 = <Vec<std::string::String> as std::ops::Deref>::deref(copy _20) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _22 = &mut _16;
        _21 = copy _22 as &mut dyn rustc_driver::Callbacks + std::marker::Send (PointerCoercion(Unsize, Implicit));
        _18 = RunCompiler::<'_>::new(copy _19, move _21) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _17 = RunCompiler::<'_>::run(move _18) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb13, 1: bb12, otherwise: bb11];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _30 = const main::promoted[0];
        _34 = &_27;
        _33 = core::fmt::rt::Argument::<'_>::new_debug::<rustc_span::ErrorGuaranteed>(copy _34) -> [return: bb15, unwind: bb20];
    }

    bb13: {
        _26 = const main::promoted[1];
        _25 = std::fmt::Arguments::<'_>::new_const::<1>(copy _26) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _24 = _print(move _25) -> [return: bb26, unwind: bb20];
    }

    bb15: {
        _32 = [move _33];
        _31 = &_32;
        _29 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _30, copy _31) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _28 = _print(move _29) -> [return: bb27, unwind: bb20];
    }

    bb17: {
        drop(_5) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        drop(_1) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_12) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_1) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        _35 = &mut _11;
        _36 = <std::boxed::Box<[std::string::String; 2]> as std::ops::Drop>::drop(move _35) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb25: {
        (*_37) = [move _12, move _14];
        _7 = move _11;
        _6 = move _7 as std::boxed::Box<[std::string::String]> (PointerCoercion(Unsize, Implicit));
        _5 = slice::<impl [std::string::String]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb7, unwind: bb22];
    }

    bb26: {
        goto -> bb17;
    }

    bb27: {
        goto -> bb17;
    }

    bb28 (cleanup): {
        goto -> bb22;
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Error! ", const "\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Success!\n"];
        _0 = &_1;
        return;
    }
}
