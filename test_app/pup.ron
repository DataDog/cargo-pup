(
    lints: [
        Module((
            name: "empty_module_check",
            matches: Module("^test_app::function_length$"),
            rules: [
                MustNotBeEmpty(Warn),
            ],
        )),
        Function((
            name: "function_length_check",
            matches: InModule("^test_app::function_length$"),
            rules: [
                MaxLength(5, Warn),
            ],
        )),
        Module((
            name: "module_usage",
            matches: Module("^test_app::module_usage$"),
            rules: [
                RestrictImports(
                    allowed_only: None,
                    denied: Some([
                        "^std::collections",
                    ]),
                    severity: Warn,
                ),
                NoWildcardImports(Warn),
            ],
        )),
        Module((
            name: "must_not_be_empty_module",
            matches: Module("^test_app::empty_mod$"),
            rules: [
                MustNotBeEmpty(Warn),
            ],
        )),
        Module((
            name: "must_be_empty_module",
            matches: Module("^test_app::must_be_empty$"),
            rules: [
                MustBeEmpty(Warn),
            ],
        )),
        Module((
            name: "must_have_empty_mod_file",
            matches: Module("^test_app::empty_mod_file$"),
            rules: [
                MustHaveEmptyModFile(Warn),
            ],
        )),
        Module((
            name: "item_type_restrictions",
            matches: Module("^test_app::item_type$"),
            rules: [
                DeniedItems(
                    items: [
                        "struct",
                        "enum",
                        "trait",
                        "module",
                    ],
                    severity: Warn,
                ),
            ],
        )),
        Struct((
            name: "trait_restrictions",
            matches: ImplementsTrait("^test_app::trait_impl::MyTrait$"),
            rules: [
                MustBeNamed(".*MyTraitImpl$", Warn),
                MustBePrivate(Warn),
            ],
        )),
        Function((
            name: "result_type_check",
            matches: InModule("^test_app::result_error$"),
            rules: [
                ResultErrorMustImplementError(Warn),
            ],
        )),
    ],
)